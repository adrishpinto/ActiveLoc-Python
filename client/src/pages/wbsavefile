import FileUpload from "../components/upload_components/FileUploadWorkbench";
import { useState, useEffect } from "react";
import axios from "axios";
import { FaCheck } from "react-icons/fa";
import TargetEditor from "../components/TargetEditor";
const API_URL = import.meta.env.VITE_API_URL;

const workbench = () => {
  const [checkFile, setCheckFile] = useState(false);
  const [sources, setSources] = useState([]);

  const [targets, setTargets] = useState([]);


  const handleEditorChange = (index, newValue) => {
    const updated = [...targets];
    updated[index] = newValue;
    setTargets(updated);
    console.log("Updated targets:", updated);
  };

  const getXlfData = async () => {
    try {
      const res = await axios.post(
        "http://localhost:5000/load-workbench",
        {},
        {
          withCredentials: true,
        }
      );
      setSources(res.data.sources);
      setTargets(res.data.targets);
      return res.data;
    } catch (error) {
      console.error("Failed to load XLF data:", error);
      throw error;
    }
  };

  useEffect(() => {
    if (checkFile) {
      getXlfData();
    }
  }, [checkFile]);

  return (
    <div className="my-20  min-h-[500px] border rounded-xl w-[70%] mx-auto py-10">
      <h1 className="text-4xl text-center mb-5">Workbench</h1>
      {!checkFile && (
        <div>
          <FileUpload checkFile={checkFile} setCheckFile={setCheckFile} />
          <p className="text-gray-600 text-center font-[300] mt-5">
            Upload .xlf file to load source and target
          </p>
        </div>
      )}
      {sources.length == 0 && targets.length == 0 && checkFile == true && (
        <div>loading</div>
      )}
      <div className="space-y-0">
        {sources.map((item, index) => (
          <div key={index} className="flex w-full">
            {/* Source */}
            {item && (
              <div className="w-[48%] border border-black px-3 py-1">
                {item}
              </div>
            )}
            {!item && (
              <div className="w-[48%] border border-black bg-red-100 text-red-500 px-3 py-1">
                [empty sement]
              </div>
            )}

            {/* Target */}
            <textarea
              value={targets[index]}
              onChange={(e) => {
                const newTargets = [...targets];
                newTargets[index] = e.target.value;
                setTargets(newTargets);
              }}
              className="w-[48%] border border-l-0 border-black px-3 py-1 outline-none focus:bg-slate-200 resize-none leading-snug"
              rows={2} // ensures it shows 2 lines by default
            />

            {/* Checkbox */}
            <div className="w-[6%] border border-l-0 border-black flex items-center justify-center">
              {!targets[index] ? (
                <div className="text-red-500">‚ùå</div>
              ) : (
                <FaCheck className="text-green-500" />
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default workbench;
